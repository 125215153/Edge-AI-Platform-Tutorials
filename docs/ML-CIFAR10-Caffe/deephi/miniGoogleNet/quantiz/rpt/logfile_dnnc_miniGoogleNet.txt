#!/bin/bash

DNNDK_ROOT=$HOME/ML/DNNDK/tools

net=miniGoogleNet
work_dir=$HOME/ML/cifar10/deephi/miniGoogleNet/quantiz
model_dir=${work_dir}/decent_output
output_dir=${work_dir}/dnnc_output

echo "Compiling network: ${net}"
Compiling network: miniGoogleNet

$DNNDK_ROOT/dnnc --prototxt=${model_dir}/deploy.prototxt     \
       --caffemodel=${model_dir}/deploy.caffemodel \
       --output_dir=${output_dir}                  \
       --net_name=${net}                           \
       --dpu=4096FA                                \
       --cpu_arch=arm64                            \
       --mode=debug                                \
       --save_kernel
[0;33m[DNNC][Warning] Only max pooling is supported, but [avg_pool_12_8x8_s1] layer has average pooling type.
[m[0;33m[DNNC][Warning] layer [avg_pool_12_8x8_s1] is not supported in DPU, deploy it in CPU instead.
[m[0;33m[DNNC][Warning] layer [loss] is not supported in DPU, deploy it in CPU instead.
[m
DNNC Kernel Information

1. Overview
kernel numbers  : 4
kernel topology : miniGoogleNet_kernel_graph.jpg

2. Kernel Description in Detail
kernel id       : 0
kernel name     : miniGoogleNet_0
type            : DPUKernel
nodes           : NA
input node(s)   : conv1_3x3_s1(0) 
output node(s)  : inception_11a_output(0) 

kernel id       : 1
kernel name     : miniGoogleNet_1
type            : CPUKernel
nodes           : NA
input node(s)   : avg_pool_12_8x8_s1 
output node(s)  : avg_pool_12_8x8_s1 

kernel id       : 2
kernel name     : miniGoogleNet_2
type            : DPUKernel
nodes           : NA
input node(s)   : loss_classifier(0) 
output node(s)  : loss_classifier(0) 

kernel id       : 3
kernel name     : miniGoogleNet_3
type            : CPUKernel
nodes           : NA
input node(s)   : loss 
output node(s)  : loss 




echo " copying dpu elf file into /../zcu102/baseline/model/arm64_4096 "
 copying dpu elf file into /../zcu102/baseline/model/arm64_4096 
cp ${output_dir}/dpu_${net}\_*.elf  ${output_dir}/../../zcu102/baseline/model/arm64_4096

echo " copying the test images to be used by the ZCU102"
 copying the test images to be used by the ZCU102
cp -r $HOME/ML/cifar10/input/cifar10_jpg/test ${output_dir}/../../zcu102/test_images

mv ${net}_kernel*.* ${work_dir}/dnnc_output

# The following lines are for documentation only. Leave them commented
# now you can create the tar archive that you will then scp/ssh copy from HOST PC to TARGET board 
## cd ~/ML/cifar10/deephi/miniVggNet/zcu102/baseline
## ln -s ../test_images ./test_images
## cd ..
## tar -xvf baseline.tar ./baseline





